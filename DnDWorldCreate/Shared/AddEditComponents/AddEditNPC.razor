@using DnDWorldCreate.Data.Entitys
@using DnDWorldCreate.Services
@using DnDWorldCreate.Shared.AddEditComponents.InputTextComponents
@using DnDWorldCreate.Data.Enums
@inherits AddEditBase<NPC>
@inject TownService _townService
<EditForm Model="EditItem">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <Input TValue="string" Label="Name" Id="name" @bind-Value="EditItem.Name" />

    <TownSelectionComponent Label="Town ID" @bind-SelectedId="EditItem.TownId" @ref="townSelectionComponent"></TownSelectionComponent>
    <Input TValue="int" InputType="number" Label="Age" Id="age" @bind-Value="Age" />
    <Input TValue="string" RenderAsTextArea="true" Label="Backstory" Id="backstory" @bind-Value="EditItem.Backstory" />
    <Input TValue="int" InputType="number" Label="Strength" Id="strength" @bind-Value="Strength" />
    <Input TValue="int" InputType="number" Label="Intelligence" Id="intelligence" @bind-Value="Intelligence" />
    <Input TValue="int" InputType="number" Label="Wisdom" Id="wisdom" @bind-Value="Wisdom" />
    <Input TValue="int" InputType="number" Label="Charisma" Id="charisma" @bind-Value="Charisma" />
    <Input TValue="int" InputType="number" Label="Dexterity" Id="dexterity" @bind-Value="Dexterity" />
    <Input TValue="int" InputType="number" Label="Constitution" Id="constitution" @bind-Value="Constitution" />

    <AlignmentListComponent @bind-SelectedValue="Alignment" Label="Select Alignment"></AlignmentListComponent>
    <ActionButtons TItem="NPC" EditItem="@EditItem"
                   OnDelete="@OnDelete" OnSave="@OnSaveNPC" SaveButtonText="@SaveButtonText" OnDeleteAllInstances="@OnDeleteAllInstances"></ActionButtons>
</EditForm>

@code{
    [Parameter] public EventCallback<NPC> EditItemChanged { get; set; }

    private int Strength { get; set; }
    private int Intelligence { get; set; }
    private int Wisdom { get; set; }
    private int Charisma { get; set; }
    private int Dexterity { get; set; }
    private int Constitution { get; set; }
    private int Age { get; set; }
    private Alignment Alignment { get; set; }
    private TownSelectionComponent? townSelectionComponent;

    protected override async Task OnParametersSetAsync()
    {
        if (EditItem == null)
        {
            EditItem = new NPC();
        }
        if(EditItem.Age != null)
        {
            Age = (int)EditItem.Age;
        }
        Strength = EditItem.Stats.Strength;
        Intelligence = EditItem.Stats.Intelligence;
        Wisdom = EditItem.Stats.Wisdom;
        Charisma = EditItem.Stats.Charisma;
        Dexterity = EditItem.Stats.Dexterity;
        Constitution = EditItem.Stats.Constitution;
        if(EditItem.Alignment != null)
        {
            Alignment = (Alignment)EditItem.Alignment;
        }
        if(townSelectionComponent != null)
        {
            await townSelectionComponent.LoadTownsAsync();
        }
    }

    private void OnSaveNPC()
    {
        EditItem.Stats.Strength = Strength;
        EditItem.Stats.Intelligence = Intelligence;
        EditItem.Stats.Wisdom = Wisdom;
        EditItem.Stats.Charisma = Charisma;
        EditItem.Stats.Dexterity = Dexterity;
        EditItem.Stats.Constitution = Constitution;
        EditItem.Age = Age;
        EditItem.Alignment = Alignment;
        // Call the OnSave method that was passed as a parameter
        OnSave.InvokeAsync(EditItem);
    }
    
}



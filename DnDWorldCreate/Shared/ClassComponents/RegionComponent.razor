@using DnDWorldCreate.Data.Entitys
@using DnDWorldCreate.Services
@inject RegionService _regionService
@inject RegionManagerService _regionManagerService
@inherits BaseClassComponent<Region, RegionService, RegionManagerService>

<ListComponentRegion @key="Items" Label="Select Region" Items="Items" OnSelected="OnItemSelected" ItemsChanged="@_selectedItemIsNew" />

<AddEditRegion ErrorMessage="@ErrorMessage" SaveButtonText="@(SelectedItem == null ? "Save New Region" : "Update Region")" OnSave="OnSaveItem" OnDelete="OnDeleteItem" OnDeleteAllInstances="OnDeleteItemAndChildrenItems" EditItem="@(SelectedItem ?? new Region())" />

@code {
    protected override Func<RegionService, RegionManagerService, Task<IEnumerable<Region>>> GetAllItemsAsync => (service, regionManagerService) => regionManagerService.GetEditableRegionsAsync(true);
    protected override Func<RegionService, RegionManagerService, Task<IReadOnlyList<Region>>> GetAllItemsReadOnlyAsync => (service, regionManagerService) => regionManagerService.GetRegionsReadOnlyAsync(true);
    protected override Func<RegionService, Region, Task> AddItemAsync => (service, item) => service.AddAsync(item);
    protected override Func<RegionService, Region, Task> UpdateItemAsync => (service, item) => service.UpdateAsync(item);
    protected override Func<RegionService, int, Task> DeleteItemAsync => (service, id) => service.DeleteAsync(id);
    protected override Func<RegionManagerService, int, Task> DeleteItemAndChildrenItemsAsync => (service, item) => service.DeleteRegionWithTownsAsync(item);
    protected override int GetItemId(Region item) => item.Id;
}
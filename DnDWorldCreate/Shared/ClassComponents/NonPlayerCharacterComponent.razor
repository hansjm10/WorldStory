@using DnDWorldCreate.Data
@using DnDWorldCreate.Services
@inject INPCServiceBase _NpcManagerService
@inherits BaseClassComponent<NPC, NPCManagerService, NPCManagerService>

<ListComponentNPC @key="Entities" Label="Select NPC" Items="Entities" OnSelected="OnItemSelected" ItemsChanged="@_selectedEntityIsNew"/>

<AddEditNPC SaveButtonText="@(SelectedEntity == null ? "Save New NPC" : "Update NPC")" OnSave="OnSaveEntityAsync" OnDelete="OnDeleteEntityAsync" @bind-EditItem="SelectedEntity" />
@code {
    protected override Func<NPCManagerService, NPCManagerService, Task<IEnumerable<NPC>>> GetAllEntitysAsyncFunc => (service, unusedService) => service.GetAllNPCsIncluding();
    protected override Func<NPCManagerService, NPCManagerService, Task<IReadOnlyList<NPC>>> GetAllEntitysReadOnlyAsyncFunc => (service, unusedSerivce) => service.GetAllNPCsReadOnlyAsync();
    protected override Func<NPCManagerService, NPC, Task> AddEntityAsyncFunc => (service, item) => service.AddNPCAsync(item);
    protected override Func<NPCManagerService, NPC, Task> UpdateEntityAsyncFunc => (service, item) => service.UpdateNpc(item);
    protected override Func<NPCManagerService, int, Task> DeleteEntityAsyncFunc => (service, id) => service.DeleteNPCAsync(id);
    protected override int GetEntityId(NPC item) => item.Id;

    protected new void OnItemSelected(NPC item)
    {
        ErrorMessage = string.Empty;
        SelectedEntity = item;
        _selectedEntityIsNew = item == null;
    }
}